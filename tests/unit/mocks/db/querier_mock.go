// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"Chat-Websocket/internal/db"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// CreateChat provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CreateChat(ctx context.Context, arg db.CreateChatParams) (db.Chat, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateChat")
	}

	var r0 db.Chat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateChatParams) (db.Chat, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateChatParams) db.Chat); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Chat)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.CreateChatParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CreateChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChat'
type MockQuerier_CreateChat_Call struct {
	*mock.Call
}

// CreateChat is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) CreateChat(ctx interface{}, arg interface{}) *MockQuerier_CreateChat_Call {
	return &MockQuerier_CreateChat_Call{Call: _e.mock.On("CreateChat", ctx, arg)}
}

func (_c *MockQuerier_CreateChat_Call) Run(run func(ctx context.Context, arg db.CreateChatParams)) *MockQuerier_CreateChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateChatParams))
	})
	return _c
}

func (_c *MockQuerier_CreateChat_Call) Return(chat db.Chat, err error) *MockQuerier_CreateChat_Call {
	_c.Call.Return(chat, err)
	return _c
}

func (_c *MockQuerier_CreateChat_Call) RunAndReturn(run func(ctx context.Context, arg db.CreateChatParams) (db.Chat, error)) *MockQuerier_CreateChat_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRoom provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CreateRoom(ctx context.Context, name string) (db.Room, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoom")
	}

	var r0 db.Room
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (db.Room, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) db.Room); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(db.Room)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CreateRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRoom'
type MockQuerier_CreateRoom_Call struct {
	*mock.Call
}

// CreateRoom is a helper method to define mock.On call
//   - ctx
//   - name
func (_e *MockQuerier_Expecter) CreateRoom(ctx interface{}, name interface{}) *MockQuerier_CreateRoom_Call {
	return &MockQuerier_CreateRoom_Call{Call: _e.mock.On("CreateRoom", ctx, name)}
}

func (_c *MockQuerier_CreateRoom_Call) Run(run func(ctx context.Context, name string)) *MockQuerier_CreateRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_CreateRoom_Call) Return(room db.Room, err error) *MockQuerier_CreateRoom_Call {
	_c.Call.Return(room, err)
	return _c
}

func (_c *MockQuerier_CreateRoom_Call) RunAndReturn(run func(ctx context.Context, name string) (db.Room, error)) *MockQuerier_CreateRoom_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 db.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateUserParams) (db.User, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateUserParams) db.User); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.CreateUserParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockQuerier_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) CreateUser(ctx interface{}, arg interface{}) *MockQuerier_CreateUser_Call {
	return &MockQuerier_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, arg)}
}

func (_c *MockQuerier_CreateUser_Call) Run(run func(ctx context.Context, arg db.CreateUserParams)) *MockQuerier_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateUserParams))
	})
	return _c
}

func (_c *MockQuerier_CreateUser_Call) Return(user db.User, err error) *MockQuerier_CreateUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockQuerier_CreateUser_Call) RunAndReturn(run func(ctx context.Context, arg db.CreateUserParams) (db.User, error)) *MockQuerier_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteChat provides a mock function for the type MockQuerier
func (_mock *MockQuerier) DeleteChat(ctx context.Context, id int32) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChat")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_DeleteChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteChat'
type MockQuerier_DeleteChat_Call struct {
	*mock.Call
}

// DeleteChat is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockQuerier_Expecter) DeleteChat(ctx interface{}, id interface{}) *MockQuerier_DeleteChat_Call {
	return &MockQuerier_DeleteChat_Call{Call: _e.mock.On("DeleteChat", ctx, id)}
}

func (_c *MockQuerier_DeleteChat_Call) Run(run func(ctx context.Context, id int32)) *MockQuerier_DeleteChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_DeleteChat_Call) Return(err error) *MockQuerier_DeleteChat_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_DeleteChat_Call) RunAndReturn(run func(ctx context.Context, id int32) error) *MockQuerier_DeleteChat_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRoom provides a mock function for the type MockQuerier
func (_mock *MockQuerier) DeleteRoom(ctx context.Context, id int32) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoom")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_DeleteRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRoom'
type MockQuerier_DeleteRoom_Call struct {
	*mock.Call
}

// DeleteRoom is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockQuerier_Expecter) DeleteRoom(ctx interface{}, id interface{}) *MockQuerier_DeleteRoom_Call {
	return &MockQuerier_DeleteRoom_Call{Call: _e.mock.On("DeleteRoom", ctx, id)}
}

func (_c *MockQuerier_DeleteRoom_Call) Run(run func(ctx context.Context, id int32)) *MockQuerier_DeleteRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_DeleteRoom_Call) Return(err error) *MockQuerier_DeleteRoom_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_DeleteRoom_Call) RunAndReturn(run func(ctx context.Context, id int32) error) *MockQuerier_DeleteRoom_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type MockQuerier
func (_mock *MockQuerier) DeleteUser(ctx context.Context, id int32) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockQuerier_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockQuerier_Expecter) DeleteUser(ctx interface{}, id interface{}) *MockQuerier_DeleteUser_Call {
	return &MockQuerier_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *MockQuerier_DeleteUser_Call) Run(run func(ctx context.Context, id int32)) *MockQuerier_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_DeleteUser_Call) Return(err error) *MockQuerier_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, id int32) error) *MockQuerier_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetChatByID provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetChatByID(ctx context.Context, id int32) (db.Chat, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetChatByID")
	}

	var r0 db.Chat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) (db.Chat, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) db.Chat); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Chat)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetChatByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChatByID'
type MockQuerier_GetChatByID_Call struct {
	*mock.Call
}

// GetChatByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockQuerier_Expecter) GetChatByID(ctx interface{}, id interface{}) *MockQuerier_GetChatByID_Call {
	return &MockQuerier_GetChatByID_Call{Call: _e.mock.On("GetChatByID", ctx, id)}
}

func (_c *MockQuerier_GetChatByID_Call) Run(run func(ctx context.Context, id int32)) *MockQuerier_GetChatByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetChatByID_Call) Return(chat db.Chat, err error) *MockQuerier_GetChatByID_Call {
	_c.Call.Return(chat, err)
	return _c
}

func (_c *MockQuerier_GetChatByID_Call) RunAndReturn(run func(ctx context.Context, id int32) (db.Chat, error)) *MockQuerier_GetChatByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetChatsByUserAndRoom provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetChatsByUserAndRoom(ctx context.Context, arg db.GetChatsByUserAndRoomParams) ([]db.Chat, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetChatsByUserAndRoom")
	}

	var r0 []db.Chat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GetChatsByUserAndRoomParams) ([]db.Chat, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GetChatsByUserAndRoomParams) []db.Chat); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Chat)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.GetChatsByUserAndRoomParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetChatsByUserAndRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChatsByUserAndRoom'
type MockQuerier_GetChatsByUserAndRoom_Call struct {
	*mock.Call
}

// GetChatsByUserAndRoom is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) GetChatsByUserAndRoom(ctx interface{}, arg interface{}) *MockQuerier_GetChatsByUserAndRoom_Call {
	return &MockQuerier_GetChatsByUserAndRoom_Call{Call: _e.mock.On("GetChatsByUserAndRoom", ctx, arg)}
}

func (_c *MockQuerier_GetChatsByUserAndRoom_Call) Run(run func(ctx context.Context, arg db.GetChatsByUserAndRoomParams)) *MockQuerier_GetChatsByUserAndRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.GetChatsByUserAndRoomParams))
	})
	return _c
}

func (_c *MockQuerier_GetChatsByUserAndRoom_Call) Return(chats []db.Chat, err error) *MockQuerier_GetChatsByUserAndRoom_Call {
	_c.Call.Return(chats, err)
	return _c
}

func (_c *MockQuerier_GetChatsByUserAndRoom_Call) RunAndReturn(run func(ctx context.Context, arg db.GetChatsByUserAndRoomParams) ([]db.Chat, error)) *MockQuerier_GetChatsByUserAndRoom_Call {
	_c.Call.Return(run)
	return _c
}

// GetChatsByUserID provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetChatsByUserID(ctx context.Context, senderID int32) ([]db.Chat, error) {
	ret := _mock.Called(ctx, senderID)

	if len(ret) == 0 {
		panic("no return value specified for GetChatsByUserID")
	}

	var r0 []db.Chat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) ([]db.Chat, error)); ok {
		return returnFunc(ctx, senderID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) []db.Chat); ok {
		r0 = returnFunc(ctx, senderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Chat)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, senderID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetChatsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChatsByUserID'
type MockQuerier_GetChatsByUserID_Call struct {
	*mock.Call
}

// GetChatsByUserID is a helper method to define mock.On call
//   - ctx
//   - senderID
func (_e *MockQuerier_Expecter) GetChatsByUserID(ctx interface{}, senderID interface{}) *MockQuerier_GetChatsByUserID_Call {
	return &MockQuerier_GetChatsByUserID_Call{Call: _e.mock.On("GetChatsByUserID", ctx, senderID)}
}

func (_c *MockQuerier_GetChatsByUserID_Call) Run(run func(ctx context.Context, senderID int32)) *MockQuerier_GetChatsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetChatsByUserID_Call) Return(chats []db.Chat, err error) *MockQuerier_GetChatsByUserID_Call {
	_c.Call.Return(chats, err)
	return _c
}

func (_c *MockQuerier_GetChatsByUserID_Call) RunAndReturn(run func(ctx context.Context, senderID int32) ([]db.Chat, error)) *MockQuerier_GetChatsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoomByID provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetRoomByID(ctx context.Context, id int32) (db.Room, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRoomByID")
	}

	var r0 db.Room
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) (db.Room, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) db.Room); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Room)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetRoomByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoomByID'
type MockQuerier_GetRoomByID_Call struct {
	*mock.Call
}

// GetRoomByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockQuerier_Expecter) GetRoomByID(ctx interface{}, id interface{}) *MockQuerier_GetRoomByID_Call {
	return &MockQuerier_GetRoomByID_Call{Call: _e.mock.On("GetRoomByID", ctx, id)}
}

func (_c *MockQuerier_GetRoomByID_Call) Run(run func(ctx context.Context, id int32)) *MockQuerier_GetRoomByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetRoomByID_Call) Return(room db.Room, err error) *MockQuerier_GetRoomByID_Call {
	_c.Call.Return(room, err)
	return _c
}

func (_c *MockQuerier_GetRoomByID_Call) RunAndReturn(run func(ctx context.Context, id int32) (db.Room, error)) *MockQuerier_GetRoomByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetUserByEmail(ctx context.Context, email string) (db.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 db.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (db.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) db.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Get(0).(db.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockQuerier_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx
//   - email
func (_e *MockQuerier_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockQuerier_GetUserByEmail_Call {
	return &MockQuerier_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockQuerier_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockQuerier_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetUserByEmail_Call) Return(user db.User, err error) *MockQuerier_GetUserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockQuerier_GetUserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (db.User, error)) *MockQuerier_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetUserByID(ctx context.Context, id int32) (db.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 db.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) (db.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) db.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(db.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockQuerier_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockQuerier_Expecter) GetUserByID(ctx interface{}, id interface{}) *MockQuerier_GetUserByID_Call {
	return &MockQuerier_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *MockQuerier_GetUserByID_Call) Run(run func(ctx context.Context, id int32)) *MockQuerier_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetUserByID_Call) Return(user db.User, err error) *MockQuerier_GetUserByID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockQuerier_GetUserByID_Call) RunAndReturn(run func(ctx context.Context, id int32) (db.User, error)) *MockQuerier_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByName provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetUserByName(ctx context.Context, name string) (db.User, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByName")
	}

	var r0 db.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (db.User, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) db.User); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(db.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetUserByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByName'
type MockQuerier_GetUserByName_Call struct {
	*mock.Call
}

// GetUserByName is a helper method to define mock.On call
//   - ctx
//   - name
func (_e *MockQuerier_Expecter) GetUserByName(ctx interface{}, name interface{}) *MockQuerier_GetUserByName_Call {
	return &MockQuerier_GetUserByName_Call{Call: _e.mock.On("GetUserByName", ctx, name)}
}

func (_c *MockQuerier_GetUserByName_Call) Run(run func(ctx context.Context, name string)) *MockQuerier_GetUserByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetUserByName_Call) Return(user db.User, err error) *MockQuerier_GetUserByName_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockQuerier_GetUserByName_Call) RunAndReturn(run func(ctx context.Context, name string) (db.User, error)) *MockQuerier_GetUserByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByPhone provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetUserByPhone(ctx context.Context, phone string) (db.User, error) {
	ret := _mock.Called(ctx, phone)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByPhone")
	}

	var r0 db.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (db.User, error)); ok {
		return returnFunc(ctx, phone)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) db.User); ok {
		r0 = returnFunc(ctx, phone)
	} else {
		r0 = ret.Get(0).(db.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, phone)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetUserByPhone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByPhone'
type MockQuerier_GetUserByPhone_Call struct {
	*mock.Call
}

// GetUserByPhone is a helper method to define mock.On call
//   - ctx
//   - phone
func (_e *MockQuerier_Expecter) GetUserByPhone(ctx interface{}, phone interface{}) *MockQuerier_GetUserByPhone_Call {
	return &MockQuerier_GetUserByPhone_Call{Call: _e.mock.On("GetUserByPhone", ctx, phone)}
}

func (_c *MockQuerier_GetUserByPhone_Call) Run(run func(ctx context.Context, phone string)) *MockQuerier_GetUserByPhone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetUserByPhone_Call) Return(user db.User, err error) *MockQuerier_GetUserByPhone_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockQuerier_GetUserByPhone_Call) RunAndReturn(run func(ctx context.Context, phone string) (db.User, error)) *MockQuerier_GetUserByPhone_Call {
	_c.Call.Return(run)
	return _c
}

// ListChatsByRoom provides a mock function for the type MockQuerier
func (_mock *MockQuerier) ListChatsByRoom(ctx context.Context, roomID int32) ([]db.Chat, error) {
	ret := _mock.Called(ctx, roomID)

	if len(ret) == 0 {
		panic("no return value specified for ListChatsByRoom")
	}

	var r0 []db.Chat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) ([]db.Chat, error)); ok {
		return returnFunc(ctx, roomID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) []db.Chat); ok {
		r0 = returnFunc(ctx, roomID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Chat)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, roomID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_ListChatsByRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListChatsByRoom'
type MockQuerier_ListChatsByRoom_Call struct {
	*mock.Call
}

// ListChatsByRoom is a helper method to define mock.On call
//   - ctx
//   - roomID
func (_e *MockQuerier_Expecter) ListChatsByRoom(ctx interface{}, roomID interface{}) *MockQuerier_ListChatsByRoom_Call {
	return &MockQuerier_ListChatsByRoom_Call{Call: _e.mock.On("ListChatsByRoom", ctx, roomID)}
}

func (_c *MockQuerier_ListChatsByRoom_Call) Run(run func(ctx context.Context, roomID int32)) *MockQuerier_ListChatsByRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_ListChatsByRoom_Call) Return(chats []db.Chat, err error) *MockQuerier_ListChatsByRoom_Call {
	_c.Call.Return(chats, err)
	return _c
}

func (_c *MockQuerier_ListChatsByRoom_Call) RunAndReturn(run func(ctx context.Context, roomID int32) ([]db.Chat, error)) *MockQuerier_ListChatsByRoom_Call {
	_c.Call.Return(run)
	return _c
}

// ListRooms provides a mock function for the type MockQuerier
func (_mock *MockQuerier) ListRooms(ctx context.Context) ([]db.Room, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListRooms")
	}

	var r0 []db.Room
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]db.Room, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []db.Room); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Room)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_ListRooms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRooms'
type MockQuerier_ListRooms_Call struct {
	*mock.Call
}

// ListRooms is a helper method to define mock.On call
//   - ctx
func (_e *MockQuerier_Expecter) ListRooms(ctx interface{}) *MockQuerier_ListRooms_Call {
	return &MockQuerier_ListRooms_Call{Call: _e.mock.On("ListRooms", ctx)}
}

func (_c *MockQuerier_ListRooms_Call) Run(run func(ctx context.Context)) *MockQuerier_ListRooms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_ListRooms_Call) Return(rooms []db.Room, err error) *MockQuerier_ListRooms_Call {
	_c.Call.Return(rooms, err)
	return _c
}

func (_c *MockQuerier_ListRooms_Call) RunAndReturn(run func(ctx context.Context) ([]db.Room, error)) *MockQuerier_ListRooms_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function for the type MockQuerier
func (_mock *MockQuerier) ListUsers(ctx context.Context) ([]db.User, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []db.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]db.User, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []db.User); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockQuerier_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx
func (_e *MockQuerier_Expecter) ListUsers(ctx interface{}) *MockQuerier_ListUsers_Call {
	return &MockQuerier_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx)}
}

func (_c *MockQuerier_ListUsers_Call) Run(run func(ctx context.Context)) *MockQuerier_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_ListUsers_Call) Return(users []db.User, err error) *MockQuerier_ListUsers_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockQuerier_ListUsers_Call) RunAndReturn(run func(ctx context.Context) ([]db.User, error)) *MockQuerier_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type MockQuerier
func (_mock *MockQuerier) UpdateUser(ctx context.Context, arg db.UpdateUserParams) (db.User, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 db.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateUserParams) (db.User, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateUserParams) db.User); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.UpdateUserParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockQuerier_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) UpdateUser(ctx interface{}, arg interface{}) *MockQuerier_UpdateUser_Call {
	return &MockQuerier_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, arg)}
}

func (_c *MockQuerier_UpdateUser_Call) Run(run func(ctx context.Context, arg db.UpdateUserParams)) *MockQuerier_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateUserParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateUser_Call) Return(user db.User, err error) *MockQuerier_UpdateUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockQuerier_UpdateUser_Call) RunAndReturn(run func(ctx context.Context, arg db.UpdateUserParams) (db.User, error)) *MockQuerier_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserPassword provides a mock function for the type MockQuerier
func (_mock *MockQuerier) UpdateUserPassword(ctx context.Context, arg db.UpdateUserPasswordParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPassword")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateUserPasswordParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_UpdateUserPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserPassword'
type MockQuerier_UpdateUserPassword_Call struct {
	*mock.Call
}

// UpdateUserPassword is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) UpdateUserPassword(ctx interface{}, arg interface{}) *MockQuerier_UpdateUserPassword_Call {
	return &MockQuerier_UpdateUserPassword_Call{Call: _e.mock.On("UpdateUserPassword", ctx, arg)}
}

func (_c *MockQuerier_UpdateUserPassword_Call) Run(run func(ctx context.Context, arg db.UpdateUserPasswordParams)) *MockQuerier_UpdateUserPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateUserPasswordParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateUserPassword_Call) Return(err error) *MockQuerier_UpdateUserPassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_UpdateUserPassword_Call) RunAndReturn(run func(ctx context.Context, arg db.UpdateUserPasswordParams) error) *MockQuerier_UpdateUserPassword_Call {
	_c.Call.Return(run)
	return _c
}
