// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"Chat-Websocket/pkg/validatorPkg"

	"github.com/go-playground/validator/v10"
	mock "github.com/stretchr/testify/mock"
)

// NewMockValidator creates a new instance of MockValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockValidator {
	mock := &MockValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockValidator is an autogenerated mock type for the IValidator type
type MockValidator struct {
	mock.Mock
}

type MockValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockValidator) EXPECT() *MockValidator_Expecter {
	return &MockValidator_Expecter{mock: &_m.Mock}
}

// FormatErrors provides a mock function for the type MockValidator
func (_mock *MockValidator) FormatErrors(obj interface{}, errs validator.ValidationErrors) []validatorPkg.ErrorResponse {
	ret := _mock.Called(obj, errs)

	if len(ret) == 0 {
		panic("no return value specified for FormatErrors")
	}

	var r0 []validatorPkg.ErrorResponse
	if returnFunc, ok := ret.Get(0).(func(interface{}, validator.ValidationErrors) []validatorPkg.ErrorResponse); ok {
		r0 = returnFunc(obj, errs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]validatorPkg.ErrorResponse)
		}
	}
	return r0
}

// MockValidator_FormatErrors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormatErrors'
type MockValidator_FormatErrors_Call struct {
	*mock.Call
}

// FormatErrors is a helper method to define mock.On call
//   - obj
//   - errs
func (_e *MockValidator_Expecter) FormatErrors(obj interface{}, errs interface{}) *MockValidator_FormatErrors_Call {
	return &MockValidator_FormatErrors_Call{Call: _e.mock.On("FormatErrors", obj, errs)}
}

func (_c *MockValidator_FormatErrors_Call) Run(run func(obj interface{}, errs validator.ValidationErrors)) *MockValidator_FormatErrors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(validator.ValidationErrors))
	})
	return _c
}

func (_c *MockValidator_FormatErrors_Call) Return(errorResponses []validatorPkg.ErrorResponse) *MockValidator_FormatErrors_Call {
	_c.Call.Return(errorResponses)
	return _c
}

func (_c *MockValidator_FormatErrors_Call) RunAndReturn(run func(obj interface{}, errs validator.ValidationErrors) []validatorPkg.ErrorResponse) *MockValidator_FormatErrors_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateStruct provides a mock function for the type MockValidator
func (_mock *MockValidator) ValidateStruct(s interface{}) validator.ValidationErrors {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for ValidateStruct")
	}

	var r0 validator.ValidationErrors
	if returnFunc, ok := ret.Get(0).(func(interface{}) validator.ValidationErrors); ok {
		r0 = returnFunc(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(validator.ValidationErrors)
		}
	}
	return r0
}

// MockValidator_ValidateStruct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateStruct'
type MockValidator_ValidateStruct_Call struct {
	*mock.Call
}

// ValidateStruct is a helper method to define mock.On call
//   - s
func (_e *MockValidator_Expecter) ValidateStruct(s interface{}) *MockValidator_ValidateStruct_Call {
	return &MockValidator_ValidateStruct_Call{Call: _e.mock.On("ValidateStruct", s)}
}

func (_c *MockValidator_ValidateStruct_Call) Run(run func(s interface{})) *MockValidator_ValidateStruct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockValidator_ValidateStruct_Call) Return(validationErrors validator.ValidationErrors) *MockValidator_ValidateStruct_Call {
	_c.Call.Return(validationErrors)
	return _c
}

func (_c *MockValidator_ValidateStruct_Call) RunAndReturn(run func(s interface{}) validator.ValidationErrors) *MockValidator_ValidateStruct_Call {
	_c.Call.Return(run)
	return _c
}
