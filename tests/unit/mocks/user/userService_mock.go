// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"Chat-Websocket/internal/user"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserService is an autogenerated mock type for the IUserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// CreateUserService provides a mock function for the type MockUserService
func (_mock *MockUserService) CreateUserService(ctx context.Context, req *user.CreateUserReq) (*user.CreateUserRes, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserService")
	}

	var r0 *user.CreateUserRes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *user.CreateUserReq) (*user.CreateUserRes, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *user.CreateUserReq) *user.CreateUserRes); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.CreateUserRes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *user.CreateUserReq) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_CreateUserService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserService'
type MockUserService_CreateUserService_Call struct {
	*mock.Call
}

// CreateUserService is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockUserService_Expecter) CreateUserService(ctx interface{}, req interface{}) *MockUserService_CreateUserService_Call {
	return &MockUserService_CreateUserService_Call{Call: _e.mock.On("CreateUserService", ctx, req)}
}

func (_c *MockUserService_CreateUserService_Call) Run(run func(ctx context.Context, req *user.CreateUserReq)) *MockUserService_CreateUserService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*user.CreateUserReq))
	})
	return _c
}

func (_c *MockUserService_CreateUserService_Call) Return(createUserRes *user.CreateUserRes, err error) *MockUserService_CreateUserService_Call {
	_c.Call.Return(createUserRes, err)
	return _c
}

func (_c *MockUserService_CreateUserService_Call) RunAndReturn(run func(ctx context.Context, req *user.CreateUserReq) (*user.CreateUserRes, error)) *MockUserService_CreateUserService_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserService provides a mock function for the type MockUserService
func (_mock *MockUserService) DeleteUserService(ctx context.Context, id int32) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserService")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserService_DeleteUserService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserService'
type MockUserService_DeleteUserService_Call struct {
	*mock.Call
}

// DeleteUserService is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserService_Expecter) DeleteUserService(ctx interface{}, id interface{}) *MockUserService_DeleteUserService_Call {
	return &MockUserService_DeleteUserService_Call{Call: _e.mock.On("DeleteUserService", ctx, id)}
}

func (_c *MockUserService_DeleteUserService_Call) Run(run func(ctx context.Context, id int32)) *MockUserService_DeleteUserService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockUserService_DeleteUserService_Call) Return(err error) *MockUserService_DeleteUserService_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserService_DeleteUserService_Call) RunAndReturn(run func(ctx context.Context, id int32) error) *MockUserService_DeleteUserService_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserService provides a mock function for the type MockUserService
func (_mock *MockUserService) ListUserService(ctx context.Context) (*[]user.CreateUserRes, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListUserService")
	}

	var r0 *[]user.CreateUserRes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*[]user.CreateUserRes, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *[]user.CreateUserRes); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]user.CreateUserRes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_ListUserService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserService'
type MockUserService_ListUserService_Call struct {
	*mock.Call
}

// ListUserService is a helper method to define mock.On call
//   - ctx
func (_e *MockUserService_Expecter) ListUserService(ctx interface{}) *MockUserService_ListUserService_Call {
	return &MockUserService_ListUserService_Call{Call: _e.mock.On("ListUserService", ctx)}
}

func (_c *MockUserService_ListUserService_Call) Run(run func(ctx context.Context)) *MockUserService_ListUserService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserService_ListUserService_Call) Return(createUserRess *[]user.CreateUserRes, err error) *MockUserService_ListUserService_Call {
	_c.Call.Return(createUserRess, err)
	return _c
}

func (_c *MockUserService_ListUserService_Call) RunAndReturn(run func(ctx context.Context) (*[]user.CreateUserRes, error)) *MockUserService_ListUserService_Call {
	_c.Call.Return(run)
	return _c
}

// LoginUserService provides a mock function for the type MockUserService
func (_mock *MockUserService) LoginUserService(ctx context.Context, req *user.LoginUserReq) (*user.LoginUserRes, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for LoginUserService")
	}

	var r0 *user.LoginUserRes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *user.LoginUserReq) (*user.LoginUserRes, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *user.LoginUserReq) *user.LoginUserRes); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.LoginUserRes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *user.LoginUserReq) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_LoginUserService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginUserService'
type MockUserService_LoginUserService_Call struct {
	*mock.Call
}

// LoginUserService is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockUserService_Expecter) LoginUserService(ctx interface{}, req interface{}) *MockUserService_LoginUserService_Call {
	return &MockUserService_LoginUserService_Call{Call: _e.mock.On("LoginUserService", ctx, req)}
}

func (_c *MockUserService_LoginUserService_Call) Run(run func(ctx context.Context, req *user.LoginUserReq)) *MockUserService_LoginUserService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*user.LoginUserReq))
	})
	return _c
}

func (_c *MockUserService_LoginUserService_Call) Return(loginUserRes *user.LoginUserRes, err error) *MockUserService_LoginUserService_Call {
	_c.Call.Return(loginUserRes, err)
	return _c
}

func (_c *MockUserService_LoginUserService_Call) RunAndReturn(run func(ctx context.Context, req *user.LoginUserReq) (*user.LoginUserRes, error)) *MockUserService_LoginUserService_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserService provides a mock function for the type MockUserService
func (_mock *MockUserService) UpdateUserService(ctx context.Context, req *user.EditUserReq) (*user.EditUserRes, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserService")
	}

	var r0 *user.EditUserRes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *user.EditUserReq) (*user.EditUserRes, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *user.EditUserReq) *user.EditUserRes); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.EditUserRes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *user.EditUserReq) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_UpdateUserService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserService'
type MockUserService_UpdateUserService_Call struct {
	*mock.Call
}

// UpdateUserService is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockUserService_Expecter) UpdateUserService(ctx interface{}, req interface{}) *MockUserService_UpdateUserService_Call {
	return &MockUserService_UpdateUserService_Call{Call: _e.mock.On("UpdateUserService", ctx, req)}
}

func (_c *MockUserService_UpdateUserService_Call) Run(run func(ctx context.Context, req *user.EditUserReq)) *MockUserService_UpdateUserService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*user.EditUserReq))
	})
	return _c
}

func (_c *MockUserService_UpdateUserService_Call) Return(editUserRes *user.EditUserRes, err error) *MockUserService_UpdateUserService_Call {
	_c.Call.Return(editUserRes, err)
	return _c
}

func (_c *MockUserService_UpdateUserService_Call) RunAndReturn(run func(ctx context.Context, req *user.EditUserReq) (*user.EditUserRes, error)) *MockUserService_UpdateUserService_Call {
	_c.Call.Return(run)
	return _c
}
