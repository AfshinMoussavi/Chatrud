// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"Chat-Websocket/internal/db"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the IUserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// CreateUserRepository provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) CreateUserRepository(ctx context.Context, user db.CreateUserParams) (db.User, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserRepository")
	}

	var r0 db.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateUserParams) (db.User, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateUserParams) db.User); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Get(0).(db.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.CreateUserParams) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_CreateUserRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserRepository'
type MockUserRepository_CreateUserRepository_Call struct {
	*mock.Call
}

// CreateUserRepository is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *MockUserRepository_Expecter) CreateUserRepository(ctx interface{}, user interface{}) *MockUserRepository_CreateUserRepository_Call {
	return &MockUserRepository_CreateUserRepository_Call{Call: _e.mock.On("CreateUserRepository", ctx, user)}
}

func (_c *MockUserRepository_CreateUserRepository_Call) Run(run func(ctx context.Context, user db.CreateUserParams)) *MockUserRepository_CreateUserRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateUserParams))
	})
	return _c
}

func (_c *MockUserRepository_CreateUserRepository_Call) Return(user1 db.User, err error) *MockUserRepository_CreateUserRepository_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockUserRepository_CreateUserRepository_Call) RunAndReturn(run func(ctx context.Context, user db.CreateUserParams) (db.User, error)) *MockUserRepository_CreateUserRepository_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmailRepository provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetUserByEmailRepository(ctx context.Context, email string) (db.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmailRepository")
	}

	var r0 db.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (db.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) db.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Get(0).(db.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetUserByEmailRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmailRepository'
type MockUserRepository_GetUserByEmailRepository_Call struct {
	*mock.Call
}

// GetUserByEmailRepository is a helper method to define mock.On call
//   - ctx
//   - email
func (_e *MockUserRepository_Expecter) GetUserByEmailRepository(ctx interface{}, email interface{}) *MockUserRepository_GetUserByEmailRepository_Call {
	return &MockUserRepository_GetUserByEmailRepository_Call{Call: _e.mock.On("GetUserByEmailRepository", ctx, email)}
}

func (_c *MockUserRepository_GetUserByEmailRepository_Call) Run(run func(ctx context.Context, email string)) *MockUserRepository_GetUserByEmailRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetUserByEmailRepository_Call) Return(user db.User, err error) *MockUserRepository_GetUserByEmailRepository_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetUserByEmailRepository_Call) RunAndReturn(run func(ctx context.Context, email string) (db.User, error)) *MockUserRepository_GetUserByEmailRepository_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByIdRepository provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetUserByIdRepository(ctx context.Context, id int32) (db.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByIdRepository")
	}

	var r0 db.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) (db.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) db.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(db.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetUserByIdRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByIdRepository'
type MockUserRepository_GetUserByIdRepository_Call struct {
	*mock.Call
}

// GetUserByIdRepository is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserRepository_Expecter) GetUserByIdRepository(ctx interface{}, id interface{}) *MockUserRepository_GetUserByIdRepository_Call {
	return &MockUserRepository_GetUserByIdRepository_Call{Call: _e.mock.On("GetUserByIdRepository", ctx, id)}
}

func (_c *MockUserRepository_GetUserByIdRepository_Call) Run(run func(ctx context.Context, id int32)) *MockUserRepository_GetUserByIdRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockUserRepository_GetUserByIdRepository_Call) Return(user db.User, err error) *MockUserRepository_GetUserByIdRepository_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetUserByIdRepository_Call) RunAndReturn(run func(ctx context.Context, id int32) (db.User, error)) *MockUserRepository_GetUserByIdRepository_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByNameRepository provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetUserByNameRepository(ctx context.Context, name string) (db.User, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByNameRepository")
	}

	var r0 db.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (db.User, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) db.User); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(db.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetUserByNameRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByNameRepository'
type MockUserRepository_GetUserByNameRepository_Call struct {
	*mock.Call
}

// GetUserByNameRepository is a helper method to define mock.On call
//   - ctx
//   - name
func (_e *MockUserRepository_Expecter) GetUserByNameRepository(ctx interface{}, name interface{}) *MockUserRepository_GetUserByNameRepository_Call {
	return &MockUserRepository_GetUserByNameRepository_Call{Call: _e.mock.On("GetUserByNameRepository", ctx, name)}
}

func (_c *MockUserRepository_GetUserByNameRepository_Call) Run(run func(ctx context.Context, name string)) *MockUserRepository_GetUserByNameRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetUserByNameRepository_Call) Return(user db.User, err error) *MockUserRepository_GetUserByNameRepository_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetUserByNameRepository_Call) RunAndReturn(run func(ctx context.Context, name string) (db.User, error)) *MockUserRepository_GetUserByNameRepository_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByPhoneRepository provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetUserByPhoneRepository(ctx context.Context, phone string) (db.User, error) {
	ret := _mock.Called(ctx, phone)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByPhoneRepository")
	}

	var r0 db.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (db.User, error)); ok {
		return returnFunc(ctx, phone)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) db.User); ok {
		r0 = returnFunc(ctx, phone)
	} else {
		r0 = ret.Get(0).(db.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, phone)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetUserByPhoneRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByPhoneRepository'
type MockUserRepository_GetUserByPhoneRepository_Call struct {
	*mock.Call
}

// GetUserByPhoneRepository is a helper method to define mock.On call
//   - ctx
//   - phone
func (_e *MockUserRepository_Expecter) GetUserByPhoneRepository(ctx interface{}, phone interface{}) *MockUserRepository_GetUserByPhoneRepository_Call {
	return &MockUserRepository_GetUserByPhoneRepository_Call{Call: _e.mock.On("GetUserByPhoneRepository", ctx, phone)}
}

func (_c *MockUserRepository_GetUserByPhoneRepository_Call) Run(run func(ctx context.Context, phone string)) *MockUserRepository_GetUserByPhoneRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetUserByPhoneRepository_Call) Return(user db.User, err error) *MockUserRepository_GetUserByPhoneRepository_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetUserByPhoneRepository_Call) RunAndReturn(run func(ctx context.Context, phone string) (db.User, error)) *MockUserRepository_GetUserByPhoneRepository_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserRepository provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) ListUserRepository(ctx context.Context) ([]db.User, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListUserRepository")
	}

	var r0 []db.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]db.User, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []db.User); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_ListUserRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserRepository'
type MockUserRepository_ListUserRepository_Call struct {
	*mock.Call
}

// ListUserRepository is a helper method to define mock.On call
//   - ctx
func (_e *MockUserRepository_Expecter) ListUserRepository(ctx interface{}) *MockUserRepository_ListUserRepository_Call {
	return &MockUserRepository_ListUserRepository_Call{Call: _e.mock.On("ListUserRepository", ctx)}
}

func (_c *MockUserRepository_ListUserRepository_Call) Run(run func(ctx context.Context)) *MockUserRepository_ListUserRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserRepository_ListUserRepository_Call) Return(users []db.User, err error) *MockUserRepository_ListUserRepository_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockUserRepository_ListUserRepository_Call) RunAndReturn(run func(ctx context.Context) ([]db.User, error)) *MockUserRepository_ListUserRepository_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserRepository provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) UpdateUserRepository(ctx context.Context, user db.UpdateUserParams) (db.User, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserRepository")
	}

	var r0 db.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateUserParams) (db.User, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateUserParams) db.User); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Get(0).(db.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.UpdateUserParams) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_UpdateUserRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserRepository'
type MockUserRepository_UpdateUserRepository_Call struct {
	*mock.Call
}

// UpdateUserRepository is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *MockUserRepository_Expecter) UpdateUserRepository(ctx interface{}, user interface{}) *MockUserRepository_UpdateUserRepository_Call {
	return &MockUserRepository_UpdateUserRepository_Call{Call: _e.mock.On("UpdateUserRepository", ctx, user)}
}

func (_c *MockUserRepository_UpdateUserRepository_Call) Run(run func(ctx context.Context, user db.UpdateUserParams)) *MockUserRepository_UpdateUserRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateUserParams))
	})
	return _c
}

func (_c *MockUserRepository_UpdateUserRepository_Call) Return(user1 db.User, err error) *MockUserRepository_UpdateUserRepository_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockUserRepository_UpdateUserRepository_Call) RunAndReturn(run func(ctx context.Context, user db.UpdateUserParams) (db.User, error)) *MockUserRepository_UpdateUserRepository_Call {
	_c.Call.Return(run)
	return _c
}
